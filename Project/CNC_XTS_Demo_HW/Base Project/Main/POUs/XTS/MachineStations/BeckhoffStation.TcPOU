<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="BeckhoffStation" Id="{bbe07669-1b09-0bc2-0cf7-35c98289024b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK BeckhoffStation EXTENDS MachineStation
VAR_INPUT
	rMultiStn			: REFERENCE TO MultiStation;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	PosTriggerPayload	: Payload_typ;
	StationPayload		: ARRAY[0..GVL.MULTISTN_NUM_STN - 1] OF Payload_typ;
	StartingMoverFound		: BOOL;
	i					: INT;
	_Run				: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT (__ISVALIDREF(rMultiStn)) THEN
	ADSLOGSTR( ADSLOG_MSGTYPE_ERROR, 'Invalid reference at %s.', InstancePath);	// how to make this work?
	RETURN;
END_IF

// Station Sequence
IF Enable THEN
	IF NOT _Enable THEN
		;
	END_IF

	// Catch Incoming Shuttles and process them
	IF rMultiStn.PositionTrigger.MoverPassedPosition THEN
		IF StartingMoverFound OR rMultiStn.PositionTrigger.CurrentMover.IdentInGroup = 9 THEN
			CASE rMultiStn.PositionTrigger.CurrentMover.IdentInGroup OF
				9:		rMultiStn.PositionTrigger.CurrentMover.MoveToStation(rMultiStn.Station[9]);		rMultiStn.PositionTrigger.MuteCurrent();	StartingMoverFound	:= TRUE;
				8:		rMultiStn.PositionTrigger.CurrentMover.MoveToStation(rMultiStn.Station[8]);		rMultiStn.PositionTrigger.MuteCurrent();
				7:		rMultiStn.PositionTrigger.CurrentMover.MoveToStation(rMultiStn.Station[7]);		rMultiStn.PositionTrigger.MuteCurrent();
				6:		rMultiStn.PositionTrigger.CurrentMover.MoveToStation(rMultiStn.Station[6]);		rMultiStn.PositionTrigger.MuteCurrent();
				5:		rMultiStn.PositionTrigger.CurrentMover.MoveToStation(rMultiStn.Station[5]);		rMultiStn.PositionTrigger.MuteCurrent();
				4:		rMultiStn.PositionTrigger.CurrentMover.MoveToStation(rMultiStn.Station[4]);		rMultiStn.PositionTrigger.MuteCurrent();
				3:		rMultiStn.PositionTrigger.CurrentMover.MoveToStation(rMultiStn.Station[3]);		rMultiStn.PositionTrigger.MuteCurrent();
				2:		rMultiStn.PositionTrigger.CurrentMover.MoveToStation(rMultiStn.Station[2]);		rMultiStn.PositionTrigger.MuteCurrent(); 
				1:		rMultiStn.PositionTrigger.CurrentMover.MoveToStation(rMultiStn.Station[1]);		rMultiStn.PositionTrigger.MuteCurrent(); 
				0:		rMultiStn.PositionTrigger.CurrentMover.MoveToStation(rMultiStn.Station[0]);		rMultiStn.PositionTrigger.MuteCurrent(); 
				ELSE	rMultiStn.PositionTrigger.CurrentMover.MoveVelocity(1000);						rMultiStn.PositionTrigger.MuteCurrent(); 
			END_CASE
		ELSE 			rMultiStn.PositionTrigger.CurrentMover.MoveVelocity(1000);						rMultiStn.PositionTrigger.MuteCurrent(); 
		END_IF
	END_IF

	// Printing Sequence State Machine
	CASE State OF
		STN_WAIT:
			IF (Run AND NOT _Run) AND_THEN rMultiStn.AllMoversInPosition THEN
				State				:= STN_SEND;
			END_IF

		STN_SEND:
			// Send Mover
			FOR i := 0 TO 9 DO
				rMultiStn.Station[i].CurrentMover.MoveVelocity(1000);	rMultiStn.Station[i].UnregisterCurrent();
			END_FOR
			State	:= STN_WAIT;

		STN_ERROR:

	END_CASE

ELSIF _Enable THEN
	State				:= STN_WAIT;
	StartingMoverFound	:= FALSE;
END_IF

//Save Previous Values
_Enable	:= Enable;
_Run	:= Run;]]></ST>
    </Implementation>
    <LineIds Name="BeckhoffStation">
      <LineId Id="333" Count="2" />
      <LineId Id="97" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="106" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="287" Count="2" />
      <LineId Id="452" Count="0" />
      <LineId Id="310" Count="0" />
      <LineId Id="436" Count="7" />
      <LineId Id="469" Count="1" />
      <LineId Id="446" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="456" Count="0" />
      <LineId Id="454" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="447" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="453" Count="0" />
      <LineId Id="114" Count="1" />
      <LineId Id="103" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="448" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>